Функция ПолучитьТаблицу()
	  ТаблицаИзменений = Новый ТаблицаЗначений;
	  ТаблицаИзменений.Колонки.Добавить("Версия",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0)));
	  ТаблицаИзменений.Колонки.Добавить("Пользователь",Новый ОписаниеТипов("Строка"));
	  ТаблицаИзменений.Колонки.Добавить("ДатаСоздания",Новый ОписаниеТипов("Дата"));
	  ТаблицаИзменений.Колонки.Добавить("Комментарий",Новый ОписаниеТипов("Строка"));
	  ТаблицаИзменений.Колонки.Добавить("ТипОбъекта",Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(256)));
	  ТаблицаИзменений.Колонки.Добавить("Добавлен",Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	  Возврат ТаблицаИзменений;
  КонецФункции
Процедура  ЗаписатьТаблицуИзменений(ТаблицаИзменений, БазаДанных)
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	                 |	ТаблицаИзменений.Комментарий КАК Комментарий,
	                 |	ТаблицаИзменений.ТипОбъекта КАК Метаданные,
	                 |	ТаблицаИзменений.Версия КАК Версия,
	                 |	ТаблицаИзменений.Пользователь КАК Пользователь,
	                 |	ТаблицаИзменений.ДатаСоздания КАК ДатаСоздания,
	                 |	ТаблицаИзменений.Добавлен КАК Добавлен
	                 |ПОМЕСТИТЬ ТаблицаИзменений
	                 |ИЗ
	                 |	&ТаблицаИзменений КАК ТаблицаИзменений
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	ТаблицаИзменений.Комментарий КАК Комментарий,
	                 |	ТаблицаИзменений.Метаданные КАК Метаданные,
	                 |	ТаблицаИзменений.Версия КАК Версия,
	                 |	ТаблицаИзменений.Пользователь КАК Пользователь,
	                 |	ТаблицаИзменений.ДатаСоздания КАК ДатаСоздания,
	                 |	ТаблицаИзменений.Добавлен КАК Добавлен
	                 |ИЗ
	                 |	ТаблицаИзменений КАК ТаблицаИзменений
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсторияХранилища КАК ИсторияХранилища
	                 |		ПО ТаблицаИзменений.Версия = ИсторияХранилища.Версия
	                 |			И (ИсторияХранилища.БазаДанных = &ТекущееХранилище)
	                 |			И ТаблицаИзменений.ДатаСоздания = ИсторияХранилища.ДатаСоздания
	                 |ГДЕ
	                 |	ИсторияХранилища.Ссылка ЕСТЬ NULL";
	 Запрос.УстановитьПараметр("ТаблицаИзменений",ТаблицаИзменений);
	 Запрос.УстановитьПараметр("ТекущееХранилище",БазаДанных);
	  Выборка = Запрос.Выполнить().Выбрать();
	  Пока Выборка.Следующий() Цикл
		  НовыйЭлементИстории = Справочники.ИсторияХранилища.СоздатьЭлемент();
		  НовыйЭлементИстории.Версия = Выборка.Версия;
		  НовыйЭлементИстории.Комментарий = Выборка.Комментарий;
		  НовыйЭлементИстории.Метаданные = Выборка.Метаданные;
		  НовыйЭлементИстории.Пользователь = Выборка.Пользователь;
		  НовыйЭлементИстории.ДатаСоздания = Выборка.ДатаСоздания;
		  НовыйЭлементИстории.Добавлен = Выборка.Добавлен;
		  НовыйЭлементИстории.БазаДанных = БазаДанных;
		  НовыйЭлементИстории.Записать();
	  КонецЦикла;
КонецПроцедуры
Функция ВернутьНомерПоследнегоЗагруженногоКоммита(ТекущееХранилище)  
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ИсторияХранилища.Версия) КАК Версия
	               |ИЗ
	               |	Справочник.ИсторияХранилища КАК ИсторияХранилища
	               |ГДЕ
	               |	ИсторияХранилища.БазаДанных = &ТекущееХранилище";
	Запрос.УстановитьПараметр("ТекущееХранилище", ТекущееХранилище);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Версия;
	Иначе
		Результат = 0;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Функция ПолучитьСписокХранилищ()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БазыДанных.Ссылка КАК Ссылка,
	               |	БазыДанных.ПользовательХранилища КАК ПользовательХранилища,
	               |	БазыДанных.ПарольХранилища КАК ПарольХранилища,
	               |	БазыДанных.ПутьКХранилищу КАК ПутьКХранилищу,
				   |	БазыДанных.Наименование КАК Наименование,
	               |	БазыДанных.ИмяКаталогаБазы КАК ИмяКаталогаБазы
	               |ИЗ
	               |	Справочник.БазыДанных КАК БазыДанных
	               |ГДЕ
	               |	БазыДанных.ВключенаВРегламентРассылки";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
&НаСервере
Функция ПроверитьЕстьЛиФайлКаталог(Каталог)
	Файл = Новый Файл (Каталог);
	Возврат Файл.Существует();
КонецФункции
&НаСервере
Процедура ПроверитьПолучитьНовоеИзХранилища() Экспорт
	СписокХранилищ = ПолучитьСписокХранилищ();
	ОсновнойКаталог = Константы.ОсновнойКаталогОбработкиХранилищ.Получить();
	Для Каждого ТекущееХранилище Из СписокХранилищ Цикл
		ФайлMXL = ОсновнойКаталог +"\Logs\"+ТекущееХранилище.ИмяКаталогаБазы+"\ver.mxl";
		ФайлLog = ОсновнойКаталог +"\Logs\"+ТекущееХранилище.ИмяКаталогаБазы+"\log.txt";
		КаталогФайловойБазы =  ОсновнойКаталог +"\Bases\"+ТекущееХранилище.ИмяКаталогаБазы;
		КаталогХранилища = ТекущееХранилище.ПутьКХранилищу;
		Если Не ПроверитьЕстьЛиФайлКаталог(КаталогХранилища) Тогда
			ЗаписьОшибка = РегистрыСведений.СписокОшибок.СоздатьМенеджерЗаписи();
			ЗаписьОшибка.ДатаСобытия = ТекущаяДата();
			ЗаписьОшибка.Хранилище = ТекущееХранилище.Ссылка;
			ЗаписьОшибка.ОписаниеСобытия = "Не обнаружен каталог хранилища "+ТекущееХранилище.Наименование;
			ЗаписьОшибка.Записать();
		КонецЕсли;
		ПользовательХранилища = ТекущееХранилище.ПользовательХранилища;
		ПарольХранилища = ?(ТекущееХранилище.ПарольХранилища="","""""",ТекущееХранилище.ПарольХранилища);
		Попытка
			УдалитьФайлы(ФайлMXL);
		Исключение
		КонецПопытки;
		КодОшибки = "";
		WshShell = Новый COMОбъект("WScript.Shell");
		Файл = Новый Файл (ФайлMXL);
		
		ТекстКоманднойСтроки = """"+КаталогПрограммы()+"1cv8.exe"" designer /Out """+ФайлLog+""" -NoTruncate /F """+КаталогФайловойБазы+""" /ConfigurationRepositoryF """+КаталогХранилища+""" /ConfigurationRepositoryN "+ПользовательХранилища+" /ConfigurationRepositoryP "+ПарольХранилища+" /ConfigurationRepositoryReport """+ФайлMXL+""" -nBegin "+Формат(ВернутьНомерПоследнегоЗагруженногоКоммита(ТекущееХранилище.Ссылка),"ЧГ=");
		КодОшибки = WshShell.Run(ТекстКоманднойСтроки);
		//подождем 2 минуты, если все хорошо, система успеет, хотя не, лишнее, повисим 2 минуты пока файл не появится
		ВремяПрошлогоОпроса = ТекущаяДата()+300;      
		
		Пока 1=1  Цикл
			Если ВремяПрошлогоОпроса < ТекущаяДата() Тогда
				Прервать;
			КонецЕсли;
		//ждем пока создастся
		КонецЦикла;
				
		ВремяПрошлогоОпроса = ТекущаяДата();      
		Рубим = Ложь;
		Пока Не Файл.Существует()  Цикл
			Если ВремяПрошлогоОпроса+180 < ТекущаяДата() Тогда
				Рубим = Истина;
				Прервать;
			КонецЕсли;
		//ждем пока создастся
		КонецЦикла;
		Если Рубим Тогда
			Сообщить("Две минуты прошло, паровоз на месте");
			Отказ = Истина;
			ЗаписьОшибка = РегистрыСведений.СписокОшибок.СоздатьМенеджерЗаписи();
			ЗаписьОшибка.ДатаСобытия = ТекущаяДата();
			ЗаписьОшибка.Хранилище = ТекущееХранилище.Ссылка;
			ЗаписьОшибка.ОписаниеСобытия = "Не отработана выгрузка из хранилища "+ТекущееХранилище.Наименование;
			ЗаписьОшибка.Записать();
			Продолжить;
		КонецЕсли;
		//проверяем занятость файла который тащится фоновым заданием и отпускается только через некоторое время
		УраОтпустило=ЛожЬ;
		ВремяПрошлогоОпроса = ТекущаяДата();
		Пока Не УраОтпустило Цикл
		//ждем пока отпустит запись в мксель
			Если ВремяПрошлогоОпроса < ТекущаяДата() Тогда
				Попытка 
					ТабличныйДокумент = Новый ТабличныйДокумент();
					ТабличныйДокумент.Прочитать(ФайлMXL);        
					УраОтпустило = Истина;
				Исключение
					УраОтпустило = Ложь;
				КонецПопытки;
				ВремяПрошлогоОпроса = ТекущаяДата()+60;
			КонецЕсли;
		КонецЦикла;
		ТабличныйДокумент.Записать(ФайлLog, ТипФайлаТабличногоДокумента.ANSITXT);	
		ТекстовыйФайл = Новый ТекстовыйДокумент;
		ТекстовыйФайл.Прочитать(
			ФайлLog,
			КодировкаТекста.ANSI, 
			Символы.ВК + Символы.ПС
		);

		// Выводим текст по строкам.
		ТаблицаИзменений = ПолучитьТаблицу();
		Версия = 0; Пользователь = ""; ДатаСоздания = ""; Комментарий = ""; ТипОбъекта = "";
		ПризнакДобавлен = Ложь;	ПризнакУдален = Ложь; ПризнакИзменен = Ложь;
		Для Индекс = 1 По ТекстовыйФайл.КоличествоСтрок() Цикл
			ОчереднаяСтрока = ТекстовыйФайл.ПолучитьСтроку(Индекс);
			Если Лев(ОчереднаяСтрока,7) = "Версия:" Тогда
				Версия = Число(СокрЛП(Сред(ОчереднаяСтрока,8))); 
				Пользователь = "";
				ДатаСоздания = "";
				Комментарий = ""; 
				ТипОбъекта = "";
				ПризнакДобавлен = Ложь;
				ПризнакУдален = Ложь;
				ПризнакИзменен = Ложь;
			ИначеЕсли Версия = "" Тогда
			//
			ИначеЕсли Лев(ОчереднаяСтрока,13) = "Пользователь:" Тогда
				Пользователь = СокрЛП(Сред(ОчереднаяСтрока,14)); 
			ИначеЕсли Лев(ОчереднаяСтрока,14) = "Дата создания:" Тогда
				ДатаСоздания = Дата(СокрЛП(Сред(ОчереднаяСтрока,15))+" 00:00:00"); 
			ИначеЕсли Лев(ОчереднаяСтрока,15) = "Время создания:" Тогда
			//
			ИначеЕсли Лев(ОчереднаяСтрока,8) = "Удалены:" Тогда
				ПризнакУдален = Истина;
				НоваяСтрока = ТаблицаИзменений.Добавить();
				НоваяСтрока.Версия = Версия;
				НоваяСтрока.Пользователь =  Пользователь;
				НоваяСтрока.ДатаСоздания = ДатаСоздания;
				НоваяСтрока.Комментарий = Комментарий;			  
				НоваяСтрока.ТипОбъекта = СокрЛП(Сред(ОчереднаяСтрока,9));
				НоваяСтрока.Добавлен = "Удален";
			ИначеЕсли Лев(ОчереднаяСтрока,10) = "Добавлены:" Тогда
				ПризнакДобавлен = Истина;
				НоваяСтрока = ТаблицаИзменений.Добавить();
				НоваяСтрока.Версия = Версия;
				НоваяСтрока.Пользователь =  Пользователь;
				НоваяСтрока.ДатаСоздания = ДатаСоздания;
				НоваяСтрока.Комментарий = Комментарий;			  
				НоваяСтрока.ТипОбъекта = СокрЛП(Сред(ОчереднаяСтрока,11));
				НоваяСтрока.Добавлен = "Добавлен";
			ИначеЕсли Лев(ОчереднаяСтрока,9) = "Изменены:" Тогда
				Если СокрЛП(Сред(ОчереднаяСтрока,10))<>"УправлениеТорговлей" Тогда
					ПризнакИзменен = Истина;
					НоваяСтрока = ТаблицаИзменений.Добавить();
					НоваяСтрока.Версия = Версия;
					НоваяСтрока.Пользователь =  Пользователь;
					НоваяСтрока.ДатаСоздания = ДатаСоздания;
					НоваяСтрока.Комментарий = Комментарий;
					НоваяСтрока.ТипОбъекта = СокрЛП(Сред(ОчереднаяСтрока,10));
					НоваяСтрока.Добавлен = "";
				КонецЕсли;
			ИначеЕсли Не ПризнакДобавлен Тогда
			//не дошли до блока, идет комментарий
				Если СокрЛП(ОчереднаяСтрока) <> "" Тогда
					Если Лев(ОчереднаяСтрока,12) = "Комментарий:" Тогда
						Комментарий = СокрЛП(Сред(ОчереднаяСтрока,13));
					Иначе
						Комментарий = Комментарий + Символы.ПС + ОчереднаяСтрока ;
					КонецЕслИ;
				КонецЕслИ;
			ИначеЕсли ПризнакДобавлен или ПризнакИзменен или ПризнакУдален Тогда
				Если СокрЛП(ОчереднаяСтрока)<>"" Тогда
					Если СокрЛП(ОчереднаяСтрока) = "УправлениеТорговлей" Тогда  
						Продолжить;
					КонецЕсли;
					НоваяСтрока = ТаблицаИзменений.Добавить();
					НоваяСтрока.Версия = Версия;
					НоваяСтрока.Пользователь =  Пользователь;
					НоваяСтрока.ДатаСоздания = ДатаСоздания;
					НоваяСтрока.Комментарий = Комментарий;
					НоваяСтрока.ТипОбъекта = СокрЛП(ОчереднаяСтрока);
					Если ПризнакИзменен Тогда 
						//изменения просто пустыми оставляем чтобы не захламлять вывод
						НоваяСтрока.Добавлен = "";
					ИначеЕсли ПризнакУдален Тогда
						НоваяСтрока.Добавлен = "Удален";
					Иначе
						НоваяСтрока.Добавлен = "Добавлен";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ЗаписатьТаблицуИзменений(ТаблицаИзменений, ТекущееХранилище.Ссылка);
	КонецЦикла;
КонецПроцедуры

//Тут процедуры для работы с http сервисом.
Функция ВернутьСписокБаз() Экспорт
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	БазыДанных.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.БазыДанных КАК БазыДанных
	               |ГДЕ
	               |	БазыДанных.ВключенаВРегламентРассылки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Новый Структура("idbase",Выборка.Наименование));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ВернутьСписокМетаданных(idbase,idtype) Экспорт
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ИсторияХранилища.Метаданные КАК Наименование
	               |ИЗ
	               |	Справочник.ИсторияХранилища КАК ИсторияХранилища
	               |ГДЕ
	               |	ИсторияХранилища.БазаДанных.Наименование = &idbase
	               |	И ИсторияХранилища.Метаданные ПОДОБНО &idtype
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ИсторияХранилища.Метаданные";
	Запрос.УстановитьПараметр("idbase", idbase);
	Запрос.УстановитьПараметр("idtype", idtype+"%");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Новый Структура("idmeta",Выборка.Наименование));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ВернутьИсторию(idbase,idmeta) Экспорт
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ИсторияХранилища.Комментарий КАК СТРОКА(1024)) КАК Комментарий,
	               |	ИсторияХранилища.ДатаСоздания КАК ДатаСоздания,
	               |	ИсторияХранилища.Пользователь КАК Пользователь,
	               |	ИсторияХранилища.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ИсторияХранилища КАК ИсторияХранилища
	               |ГДЕ
	               |	ИсторияХранилища.БазаДанных.Наименование = &idbase
	               |	И ИсторияХранилища.Метаданные = &idmeta
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаСоздания";
	Запрос.УстановитьПараметр("idbase", idbase);
	Запрос.УстановитьПараметр("idmeta", idmeta);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Новый Структура("hdata,huser,hrem",Формат(Выборка.ДатаСоздания,"ДЛФ=Д"), Выборка.Пользователь, Выборка.Комментарий));
	КонецЦикла;
	Возврат Результат;
КонецФункции
Функция ВернутьИсториюЗаПериод(idbase,firstdate,seconddate) Экспорт
	Результат = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ИсторияХранилища.Комментарий КАК СТРОКА(1024)) КАК Комментарий,
		|	ИсторияХранилища.ДатаСоздания КАК ДатаСоздания,
		|	ИсторияХранилища.Пользователь КАК Пользователь,
		|	ИсторияХранилища.Ссылка КАК Ссылка,
		|	ИсторияХранилища.Метаданные КАК Метаданные
		|ИЗ
		|	Справочник.ИсторияХранилища КАК ИсторияХранилища
		|ГДЕ
		|	ИсторияХранилища.БазаДанных.Наименование = &idbase
		|	И ИсторияХранилища.ДатаСоздания <= &seconddate
		|	И ИсторияХранилища.ДатаСоздания >= &firstdate
		|
		|УПОРЯДОЧИТЬ ПО
		|	Метаданные,
		|	ДатаСоздания
		|ИТОГИ ПО
		|	Метаданные";
	
	Запрос.УстановитьПараметр("idbase", idbase);
	Запрос.УстановитьПараметр("firstdate", firstdate);
	Запрос.УстановитьПараметр("seconddate", seconddate);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаМетаданные = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМетаданные.Следующий() Цикл
		ИсторияОбъекта = Новый Массив;
		ВыборкаДетальныеЗаписи = ВыборкаМетаданные.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИсторияОбъекта.Добавить(Новый Структура("hdata,huser,hrem",Формат(ВыборкаДетальныеЗаписи.ДатаСоздания,"ДЛФ=Д"), ВыборкаДетальныеЗаписи.Пользователь, ВыборкаДетальныеЗаписи.Комментарий));
		КонецЦикла;
	    Результат.Добавить(Новый Структура("hmeta,hhistory", ВыборкаМетаданные.Метаданные, ИсторияОбъекта));
	КонецЦикла;
	Возврат Результат;
КонецФункции